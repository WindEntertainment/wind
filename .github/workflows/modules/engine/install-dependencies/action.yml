name: Install engine dependencies
description: Install engine dependencies

inputs:
  buildSettings:
    description: Conan settings
    default: build_type=Debug

runs:
  using: 'composite'
  steps:
    - name: Setup conan cache
      uses: ./.github/workflows/utils/cache/get-conan-cache

    - name: Install dependencies
      shell: bash
      run: conan install . --update -s build_type=Debug --build=missing -c tools.system.package_manager:mode=install

    - name: Install Linux staff
      run:   |
        if [ "$RUNNER_OS" == "Linux" ]; then
          sudo apt update
          sudo apt install p7zip-full

          cd ../
          mkdir ultralight
          cd ultralight
          pwd
          which dotnet

          wget https://ultralight-files.sfo3.cdn.digitaloceanspaces.com/ultralight-sdk-1.3.0-linux-x64.7z
          7za x ultralight-sdk-1.3.0-linux-x64.7z
          echo "ULTRALIGHT_PATH=$(pwd)" >> $GITHUB_ENV
          echo "DOTNET_PATH=$(which dotnet)" >> $GITHUB_ENV
          ls -a

        elif [ "$RUNNER_OS" == "Windows" ]; then
          echo Windows
        elif [ "$RUNNER_OS" == "macOS" ]; then
          brew install p7zip

          cd ../
          mkdir ultralight
          cd ultralight
          pwd
          which dotnet

          wget https://ultralight-files.sfo3.cdn.digitaloceanspaces.com/ultralight-sdk-1.4.0a-mac-arm64.7z
          7za x ultralight-sdk-1.4.0a-mac-arm64.7z
          echo "ULTRALIGHT_PATH=$(pwd)/SDK" >> $GITHUB_ENV
          echo "DOTNET_PATH=$(which dotnet)" >> $GITHUB_ENV
          ls -a
        else
          echo "$RUNNER_OS not supported"
          exit 1
        fi
      shell: bash
    - name: Install Linux staff
      run:   |
        if [ "$RUNNER_OS" == "Linux" ]; then
          pwd
          touch CMakeEnv.txt
          echo 'set(ENV{ULTRALIGHT_PATH} ${{ env.ULTRALIGHT_PATH }})' >> CMakeEnv.txt
          echo 'set(ENV{DOTNET_ROOT} ${{ env.DOTNET_PATH }})' >> CMakeEnv.txt
          echo 'set(ENV{DOTNET_INCLUDES} "${{ env.DOTNET_PATH }}/packs/Microsoft.NETCore.App.Host.linux-x64/8.0.3/runtimes/linux-x64/native")' >> CMakeEnv.txt

          cat CMakeEnv.txt

          cmake -DCMAKE_POLICY_DEFAULT_CMP0091=NEW -DCMAKE_BUILD_TYPE=Debug -DCMAKE_TOOLCHAIN_FILE=build/Debug/generators/conan_toolchain.cmake -S$(pwd) -B$(pwd)/build/Debug -G "Unix Makefiles"

        elif [ "$RUNNER_OS" == "Windows" ]; then
          echo Windows
        elif [ "$RUNNER_OS" == "macOS" ]; then
          pwd
          touch CMakeEnv.txt
          echo ${{ env.ULTRALIGHT_PATH }}
          echo ${{ env.DOTNET_PATH }}
          echo 'set(ENV{ULTRALIGHT_PATH} "${{ env.ULTRALIGHT_PATH }}")' >> CMakeEnv.txt
          echo 'set(ENV{DOTNET_ROOT} "${{ env.DOTNET_PATH }}")' >> CMakeEnv.txt
          echo 'set(ENV{DOTNET_INCLUDES} "${{ env.DOTNET_PATH }}/packs/Microsoft.NETCore.App.Host.osx-arm64/8.0.3/runtimes/osx-arm64/native")' >> CMakeEnv.txt
          ls -a ${{ env.DOTNET_PATH }}/packs
          cat CMakeEnv.txt

          cmake -DCMAKE_POLICY_DEFAULT_CMP0091=NEW -DCMAKE_BUILD_TYPE=Debug -DCMAKE_TOOLCHAIN_FILE=build/Debug/generators/conan_toolchain.cmake -S$(pwd) -B$(pwd)/build/Debug -G "Unix Makefiles"
          echo 123
          cmake --build $(pwd)/build/Debug --parallel 10 --target game
        else
          echo "$RUNNER_OS not supported"
          exit 1
        fi
      shell: bash
          # which dotnet

          # ls -a
          # pwd
          # cmake -DCMAKE_POLICY_DEFAULT_CMP0091=NEW -DCMAKE_BUILD_TYPE=Debug -DCMAKE_TOOLCHAIN_FILE=build/Debug/generators/conan_toolchain.cmake -S$(pwd) -B$(pwd)/build/Debug -G "Unix Makefiles"
          # cmake --build .
