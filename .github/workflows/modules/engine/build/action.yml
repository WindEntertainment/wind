name: Build engine
description: Build engine

runs:
  using: 'composite'
  steps:
    - name: Setup conan base
      uses: ./.github/workflows/utils/setup-conan


    - name: Setup ultralight base
      uses: ./.github/workflows/utils/setup-ultralight

    - name: Prepare engine env
      uses: ./.github/workflows/modules/engine/setup-env

    - name: Install dependencies
      uses: ./.github/workflows/modules/engine/install-dependencies

    - uses: actions/cache/restore@v4
      with:
        path: ${{ env.projectRoot }}/dreich/game/data/.cache
        key: ${{ env.envHash }}-${{ hashFiles('${{ env.projectRoot }}/dreich/game/data/**/.export-config') }}-${{ env.os }}-asset-manager

    - name: Build game with wm
      shell: bash
      run: |
        export CC=${{ env.cc }}
        export CXX=${{ env.cxx }}
        wm run install -w
        wm run release-game -o releases
        ls -a releases

    - name: Upload package as artifact
      if: ${{ env.isRelease == false }}
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.artifact }}
        path: ${{ env.projectRoot }}/dreich/releases/dreich.zip
        retention-days: 1
        overwrite: true

    - uses: actions/cache/save@v4
      with:
        path: ${{ env.projectRoot }}/dreich/game/data/.cache
        key: ${{ env.envHash }}-${{ hashFiles('${{ env.projectRoot }}/dreich/game/data/**/.export-config') }}-${{ env.os }}-asset-manager

    # - name: Prepare assets
    #   uses: ./.github/workflows/modules/engine/assets

    # - name: Build game
    #   run:   |
    #     if [ "$RUNNER_OS" == "Linux" ]; then
    #       export CC=${{ env.cc }}
    #       export CXX=${{ env.cxx }}
    #       cmake --build $(pwd)/build/${{ env.engineBuildType }} --parallel 10 --target game
    #     elif [ "$RUNNER_OS" == "macOS" ]; then
    #       cmake --build $(pwd)/build/${{ env.engineBuildType }} --parallel 10 --target game
    #     elif [ "$RUNNER_OS" == "Windows" ]; then
    #       cmake -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=${{ env.engineBuildType }} -DCMAKE_TOOLCHAIN_FILE="${{ env.projectRoot }}/dreich/build/${{ env.engineBuildType }}/generators/conan_toolchain.cmake" -S "${{ env.projectRoot }}/dreich" -B "${{ env.projectRoot }}/dreich/build/${{ env.engineBuildType }}"
    #       cmake --build "${{ env.projectRoot }}/dreich/build/${{ env.engineBuildType }}" --parallel 10 --target game
    #     else
    #       echo "$RUNNER_OS not supported"
    #       exit 1
    #     fi

    #     cd build/${{ env.engineBuildType }}
    #     cpack
    #   shell: bash



    # - name: Upload package as artifact
    #   if: ${{ env.isRelease == true }}
    #   uses: actions/upload-artifact@v4
    #   with:
    #     name: ${{ env.envHash }}
    #     path: build/${{ env.engineBuildType }}
    #     retention-days: 1
    #     overwrite: true
