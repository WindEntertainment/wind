name: install-and-archive generic backend
description: 'GitHub Action to run installer and archive result'
author: 'Office TECOLI, LLC'
branding:
  color: orange
  icon:  type

inputs:
  run:
    required: true
  archive:
    required: false
  path:
    required: true
  list:
    required: false
    default: "/tmp/updated-list"
  sudo:
    required: false
  verbose:
    required: false
    default: false

runs:
  using: composite
  steps:

    - id: setup
      shell: bash
      run: |
        : setup install-and-archive
        sed 's/^ *//' << END >> $GITHUB_OUTPUT
            epoch=/tmp/epoch-$$
        END

    - id: install
      shell: bash
      run: |
        : install
        define() { IFS='\n' read -r -d '' ${1} || true ; }
        define script <<'EOS_cad8_c24e_'
        ${{ inputs.run }}
        EOS_cad8_c24e_
        epoch="${{ steps.setup.outputs.epoch }}"
        : ${epoch:?}
        test "$script" != ''
        touch $epoch && touch -A -01 $epoch &> /dev/null || sleep 0.1
        ls -l $epoch
        bash <<< "$script"

    - id: archive
      if: inputs.archive != ''
      shell: bash
      run: |
        : archive
        epoch="${{ steps.setup.outputs.epoch }}"
        archive="${{ inputs.archive }}"
        list=${{ inputs.list }}
        verbose="${{ inputs.verbose }}"
        innerSudo=$(command -v sudo &>/dev/null && echo "sudo" || echo "")
        paths="${{ inputs.path }}"
        : ${epoch:?} ${archive:?} ${paths:?}
        [ "$verbose" = true ] && set -x
        if [ -f $epoch ]
        then
            cd /
            > $list
            exec 2>&1
            for path in $paths
            do
                [[ ! "$path" =~ ^/ ]] && echo "$path does not start with /" && continue
                [ -e "$path" ] || continue
                echo "$path:"
                # require sudo to avoid permission error
                time $innerSudo \
                find $path \
                    -not -type d \( -cnewer $epoch -o -newer $epoch \) -print \
                    | tee -a $list \
                    | awk '{ print } END { printf "%d files", NR }'
            done
            #
            # reomove dissmessed files
            #
            if [ -s $list ]
            then
                perl -i -lne '(-e) ? print : print STDERR' $list 2> /tmp/dismissed || :
                if [ -s /tmp/dismissed ]
                then
                    echo dismissed: && cat /tmp/dismissed
                fi
            fi
            #
            # move symbolic links to the end of the list
            #
            if [ -s $list ]
            then
                perl -i -lne '(-l) ? do {push @s, $_; print STDERR} : print; do {print for @s} if eof' $list 2> /tmp/symlink
                if [ -s /tmp/symlink ]
                then
                    echo "moved symlinks:" && cat /tmp/symlink
                else
                    echo "no symlinks"
                    ls -l /tmp/symlink
                fi
            fi
            #
            # archive them
            #
            if [ -s $list ]
            then
                perl -i -pe s:^/:: $list
                echo -n Archive $(wc -l < $list) files ...
                time tar -czf $archive -C / -T $list
                ls -l $archive
                [ "$verbose" = true ] && tar -tvzf $archive || :
            else
                echo "no updated file found."
                > $archive
            fi
        else
            echo $epoch not found
        fi
