name: Setup ultralight
description: Setup ultralight

runs:
  using: 'composite'
  steps:
    # - name: Install ultralight
    #   if: env.os == 'ubuntu-latest'
    #   shell: bash
    #   run: |
    #     sudo chown -R $(whoami) /var/cache/apt/archives

    # - uses: actions/cache@v4
    #   if: env.os == 'ubuntu-latest'
    #   with:
    #     key: ${{ runner.os }}-apt-store-${{ hashFiles('ci-requirements.linux.txt') }}
    #     path: /var/cache/apt/archives

    # - name: Install ultralight
    #   if: env.os == 'ubuntu-latest'
    #   shell: bash
    #   run: |
    #     if [ "$RUNNER_OS" == "Linux" ]; then
    #       sudo apt-get update
    #       sudo apt-get install -y --no-install-recommends $(< ci-requirements.linux.txt)

    #       which clang
    #       which cmake
    #     else
    #       echo "$RUNNER_OS not supported"
    #       exit 1
    #     fi

    # - uses: awalsh128/cache-apt-pkgs-action@latest
    #   if: env.os == 'ubuntu-latest'
    #   with:

    #     packages: clang build-essential cmake libxcb-util-dev libgl-dev libgl1-mesa-dev libx11-xcb-dev libfontenc-dev libxaw7-dev libxcomposite-dev libxcursor-dev libxdamage-dev libxfixes-dev libxi-dev libxinerama-dev libxmu-dev libxmuu-dev libxpm-dev libxrandr-dev libxres-dev libxss-dev libxtst-dev libxv-dev libxxf86vm-dev libxcb-glx0-dev libxcb-render-util0-dev libxcb-xkb-dev libxcb-icccm4-dev libxcb-image0-dev libxcb-keysyms1-dev libxcb-randr0-dev libxcb-shape0-dev libxcb-sync-dev libxcb-xfixes0-dev libxcb-xinerama0-dev libxcb-dri3-dev libxcb-cursor-dev libxcb-dri2-0-dev libxcb-dri3-dev libxcb-present-dev libxcb-composite0-dev libxcb-ewmh-dev libxcb-res0-dev
    #     version: 1.0

    - uses: tecolicom/actions-use-homebrew-tools@v1
      if: env.os == 'macos-14'
      with:
        tools: p7zip llvm cmake conan
        cache: true

    - uses: tecolicom/actions-install-and-cache@v1
      if: env.os == 'ubuntu-latest'
      with:
        run: 'apt-get install clang build-essential cmake libxcb-util-dev libgl-dev libgl1-mesa-dev libx11-xcb-dev libfontenc-dev libxaw7-dev libxcomposite-dev libxcursor-dev libxdamage-dev libxfixes-dev libxi-dev libxinerama-dev libxmu-dev libxmuu-dev libxpm-dev libxrandr-dev libxres-dev libxss-dev libxtst-dev libxv-dev libxxf86vm-dev libxcb-glx0-dev libxcb-render-util0-dev libxcb-xkb-dev libxcb-icccm4-dev libxcb-image0-dev libxcb-keysyms1-dev libxcb-randr0-dev libxcb-shape0-dev libxcb-sync-dev libxcb-xfixes0-dev libxcb-xinerama0-dev libxcb-dri3-dev libxcb-cursor-dev libxcb-dri2-0-dev libxcb-dri3-dev libxcb-present-dev libxcb-composite0-dev libxcb-ewmh-dev libxcb-res0-dev'
        path: '/var/cache/apt/archives'
        cache: yes
        key: '${{ runner.os }}-apt-store'
        sudo: true
        # verbose: true

        # - name: Check if cache exists
    #   if: env.os == 'macos-14'
    #   id: cache-check
    #   uses: actions/cache@v4
    #   with:
    #     path: |
    #       /opt/homebrew/bin
    #     key: ${{ runner.os }}-brew

    # - name: Restore cache
    #   if: env.os == 'macos-14' && steps.cache-check.outputs.cache-hit == 'true'
    #   uses: actions/cache@v4
    #   with:
    #     path: |
    #       /opt/homebrew/bin
    #     key: ${{ runner.os }}-brew
    #     restore-keys: |
    #       ${{ runner.os }}-brew

    # - uses: actions/cache@v4
    #   if: env.os == 'macos-14'
    #   with:
    #     key: ${{ runner.os }}-brew-store
    #     path: |
    #       /opt/homebrew

    # - name: Install packages with Homebrew
    # # && steps.cache-check.outputs.cache-hit != 'true'
    #   if: env.os == 'macos-14'
    #   shell: bash
    #   run: |
    #       brew install p7zip
    #       brew install llvm
    #       brew install cmake
    #       brew install conan

    #       which cmake

    # - name: Setup Homebrew
    #   shell: bash
    #   if: env.os == 'macos-14'
    #   run: |
    #     echo 1
    #     HOMEBREW_NO_AUTO_UPDATE=1
    #     export HOMEBREW_NO_AUTO_UPDATE

    # - name: Install Brew Packages
    #   shell: bash
    #   if: env.os == 'macos-14'
    #   run: |
    #     brew bundle --file=ci-requirements.macos.txt

    # - name: Cache Homebrew Packages
    #   if: env.os == 'macos-14'
    #   uses: actions/cache@v4
    #   with:
    #     path: /opt/homebrew/Homebrew/Library/Taps/homebrew/homebrew-core
    #     key: ${{ runner.os }}-brew-store-packages-${{ hashFiles('ci-requirements.macos.txt') }}
    #     restore-keys: ${{ runner.os }}-brew-store-packages-

    # - name: Cache Homebrew Formulae
    #   if: env.os == 'macos-14'
    #   uses: actions/cache@v4
    #   with:
    #     path: /opt/homebrew/Homebrew/Library/Taps/homebrew/homebrew-cask
    #     key: ${{ runner.os }}-brew-store-formulae-${{ hashFiles('ci-requirements.macos.txt') }}
    #     restore-keys: ${{ runner.os }}-brew-store-formulae-

    # - name: Save cache
    #   if: env.os == 'macos-14'
    #   uses: actions/cache@v4
    #   with:
    #     path: |
    #       /opt/homebrew/bin
    #     key: ${{ runner.os }}-brew

    # - uses: actions/cache@v4
    #   if: env.os == 'windows-latest'
    #   with:
    #     key: ${{ runner.os }}-choco-store
    #     path: |
    #       C:\ProgramData

    # - name: Install ultralight
    #   if: env.os == 'windows-latest'
    #   shell: powershell
    #   run: |
    #     choco install make
    #     choco install cmake
    #     choco install llvm
    #     choco install 7zip

    - name: Install Chocolatey Packages
      if: env.os == 'windows-latest'
      shell: powershell
      run: |
        choco install --package-parameters=@ci-requirements.windows.txt -y

    - name: Cache Chocolatey Packages
      uses: actions/cache@v4
      if: env.os == 'windows-latest'
      with:
        path: C:\ProgramData\chocolatey\lib
        key:  ${{ runner.os }}-choco-store-${{ hashFiles('ci-requirements.windows.txt') }}
        restore-keys:  ${{ runner.os }}-choco-store-
